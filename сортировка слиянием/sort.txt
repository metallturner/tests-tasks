import java.util.Arrays;

/*
[15, 78, 89, 9, 12, 12546, 8, 879, 16, 54, 1]
[15, 78, 9, 89, 12, 12546, 8, 879, 16, 54, 1]
[9, 15, 78, 89, 8, 12, 879, 12546, 1, 16, 54]
[8, 9, 12, 15, 78, 89, 879, 12546, 1, 16, 54]
[1, 8, 9, 12, 15, 16, 54, 78, 89, 879, 12546]
[1, 8, 9, 12, 15, 16, 54, 78, 89, 879, 12546]

сложность O(n log n)
 */

public class Main {
    public static void main(String[] params) {
        int[] array = new int[] {15,78,89,9,12,12546,8,879,16,54,1};
        System.out.println(arrayToString(array));
        array = mergeSort(array);
        System.out.println(arrayToString(array));
    }

    public static int[] mergeSort(int[] array) {
        int[] tmp;
        int[] currentSrc = array;   // массив источник откуда мы сливаем подмассивы
        int[] currentDest = new int[array.length]; // массив приемник

        int size = 1;   //размер массива. Сначала 1, потом 2 и тд
        while (size < array.length) {
            // берется 2 массива размером size, сливаются в общий массив размером size * 2
            for (int i = 0; i < array.length; i += 2 * size) {
                merge(currentSrc, i, currentSrc, i + size, currentDest, i, size);
            }

            tmp = currentSrc;
            currentSrc = currentDest;
            currentDest = tmp;

            size = size * 2;

            System.out.println(arrayToString(currentSrc));
        }
        return currentSrc;
    }

    /**
     *
     * @param src1 первый подмассив
     * @param src1Start с какого элемента начинать слияние
     * @param src2 второй подмассив
     * @param src2Start с какого элемента начинать слияние
     * @param dest массив приемник в которой по итогу все сольем
     * @param destStart
     * @param size
     */
    private static void merge(int[] src1, int src1Start, int[] src2, int src2Start, int[] dest,
                              int destStart, int size) {
        int index1 = src1Start; // индекс
        int index2 = src2Start; // индекс

        int src1End = Math.min(src1Start + size, src1.length);
        int src2End = Math.min(src2Start + size, src2.length);

        if (src1Start + size > src1.length) {
            for (int i = src1Start; i < src1End; i++) {
                dest[i] = src1[i];
            }
            return;
        }

        int iterationCount = src1End - src1Start + src2End - src2Start; // тут вычисляем количество итераций цикла

/*
src1[index1] < src2[index2] если элемент из 1го массива меньше элемента второго массива то записать в результирующий
массив элемент из первого массива и номер текущего элемента увеличить на 1. Иначе наоборот
index1 < src1End проверяет не дошли ли мы до конца 1го массива.
index2 >= src2End проверяет не кончились ли элементы из 2го массива, и если кончилиь то берем элементы из 1го массива
 */
        for (int i = destStart; i < destStart + iterationCount; i++) {
            if (index1 < src1End && (index2 >= src2End || src1[index1] < src2[index2])) {
                dest[i] = src1[index1];
                index1++;
            } else {
                dest[i] = src2[index2];
                index2++;
            }
        }
    }

    private static String arrayToString(int[] array) {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        for (int i = 0; i < array.length; i++) {
            if (i > 0) {
                sb.append(", ");
            }
            sb.append(array[i]);
        }
        sb.append("]");
        return sb.toString();
    }
    }